- import_tasks: create_projects.yml
  vars:
    project_name_prefix: "dnp"
    # Creates fact: project_names

#
# Create apps in first project (prj_a)
#
- import_tasks: create_app.yml
  vars:
    project_namespace: "{{ project_names[0] }}"
    app_name: "ex1"
    create_name: "httpd-example"
    label_selector: "name=ex1"
    field_selector: "status.phase=Running"
    factname_pod: "prj_a_pod_ex1"
    factname_svc: "prj_a_svc_ex1"

- import_tasks: create_app.yml
  vars:
    project_namespace: "{{ project_names[0] }}"
    app_name: "ex2"
    create_name: "httpd-example"
    label_selector: "name=ex2"
    field_selector: "status.phase=Running"
    factname_pod: "prj_a_pod_ex2"
    factname_svc: "prj_a_svc_ex2"

#
# Create apps in second project (prj_b)
#
- import_tasks: create_app.yml
  vars:
    project_namespace: "{{ project_names[1] }}"
    app_name: "ex1"
    create_name: "httpd-example"
    label_selector: "name=ex1"
    field_selector: "status.phase=Running"
    factname_pod: "prj_b_pod_ex1"
    factname_svc: "prj_b_svc_ex1"

- import_tasks: create_app.yml
  vars:
    project_namespace: "{{ project_names[1] }}"
    app_name: "ex2"
    create_name: "httpd-example"
    label_selector: "name=ex2"
    field_selector: "status.phase=Running"
    factname_pod: "prj_b_pod_ex2"
    factname_svc: "prj_b_svc_ex2"

#
# Start of verification
#
- import_tasks: verify_new_project_network_policies.yml
    # Creates fact: network_policy_names

- import_tasks: remove_first_project_network_policies.yml

#
# Prove in the first project that ex1 an talk to ex2
# and vice versa
#
- import_tasks: curl_from_pod.yml
  vars:
    testcase_desc: "Proving prj_a ex1 can curl proj_a ex2"
    pod_name: "{{ prj_a_pod_ex1.resources[0].metadata.name }}"
    project_namespace: "{{ prj_a_pod_ex1.resources[0].metadata.namespace }}"
    curl_url: "http://{{ prj_a_svc_ex2.resources[0].spec.clusterIP }}:{{ prj_a_svc_ex2.resources[0].spec.ports[0].port }}"
    factname_curl_result: "prj_a_ex12php"
    expected_rc: 0

- import_tasks: curl_from_pod.yml
  vars:
    testcase_desc: "Proving prj_a ex2 can curl proj_a ex1"
    pod_name: "{{ prj_a_pod_ex2.resources[0].metadata.name }}"
    project_namespace: "{{ prj_a_pod_ex2.resources[0].metadata.namespace }}"
    curl_url: "http://{{ prj_a_svc_ex1.resources[0].spec.clusterIP }}:{{ prj_a_svc_ex1.resources[0].spec.ports[0].port }}"
    factname_curl_result: "prj_a_ex22httpd"
    expected_rc: 0

#
# Prove in the second project that httpd pod can talk to the php pod
# and vice versa
#
- import_tasks: curl_from_pod.yml
  vars:
    testcase_desc: "Proving prj_b ex1 can curl proj_b ex2"
    pod_name: "{{ prj_b_pod_ex1.resources[0].metadata.name }}"
    project_namespace: "{{ prj_b_pod_ex1.resources[0].metadata.namespace }}"
    curl_url: "http://{{ prj_b_svc_ex2.resources[0].spec.clusterIP }}:{{ prj_b_svc_ex2.resources[0].spec.ports[0].port }}"
    factname_curl_result: "prj_b_ex12php"
    expected_rc: 0

- import_tasks: curl_from_pod.yml
  vars:
    testcase_desc: "Proving prj_b ex2 can curl proj_b ex1"
    pod_name: "{{ prj_b_pod_ex2.resources[0].metadata.name }}"
    project_namespace: "{{ prj_b_pod_ex2.resources[0].metadata.namespace }}"
    curl_url: "http://{{ prj_b_svc_ex1.resources[0].spec.clusterIP }}:{{ prj_b_svc_ex1.resources[0].spec.ports[0].port }}"
    factname_curl_result: "prj_b_ex22httpd"
    expected_rc: 0

#
# Prove that both pods in the first project cannot talk to both pods in the second project
# because the second project still has the networkpolicies in place to prevent this.
#
- import_tasks: curl_from_pod.yml
  vars:
    testcase_desc: "Proving prj_a ex1 cannot curl proj_b ex1"
    pod_name: "{{ prj_a_pod_ex1.resources[0].metadata.name }}"
    project_namespace: "{{ prj_a_pod_ex1.resources[0].metadata.namespace }}"
    curl_url: "http://{{ prj_b_svc_ex1.resources[0].spec.clusterIP }}:{{ prj_b_svc_ex1.resources[0].spec.ports[0].port }}"
    factname_curl_result: "prj_a_http_2_b_http"
    expected_rc: 28

- import_tasks: curl_from_pod.yml
  vars:
    testcase_desc: "Proving prj_a ex1 cannot curl proj_b ex2"
    pod_name: "{{ prj_a_pod_ex1.resources[0].metadata.name }}"
    project_namespace: "{{ prj_a_pod_ex1.resources[0].metadata.namespace }}"
    curl_url: "http://{{ prj_b_svc_ex2.resources[0].spec.clusterIP }}:{{ prj_b_svc_ex2.resources[0].spec.ports[0].port }}"
    factname_curl_result: "prj_a_http_2_b_ex2"
    expected_rc: 28

- import_tasks: curl_from_pod.yml
  vars:
    testcase_desc: "Proving prj_a ex2 cannot curl proj_b ex1"
    pod_name: "{{ prj_a_pod_ex2.resources[0].metadata.name }}"
    project_namespace: "{{ prj_a_pod_ex2.resources[0].metadata.namespace }}"
    curl_url: "http://{{ prj_b_svc_ex1.resources[0].spec.clusterIP }}:{{ prj_b_svc_ex1.resources[0].spec.ports[0].port }}"
    factname_curl_result: "prj_a_ex2_2_b_ex1"
    expected_rc: 28

- import_tasks: curl_from_pod.yml
  vars:
    testcase_desc: "Proving prj_a ex1 cannot curl proj_b ex2"
    pod_name: "{{ prj_a_pod_ex1.resources[0].metadata.name }}"
    project_namespace: "{{ prj_a_pod_ex1.resources[0].metadata.namespace }}"
    curl_url: "http://{{ prj_b_svc_ex2.resources[0].spec.clusterIP }}:{{ prj_b_svc_ex2.resources[0].spec.ports[0].port }}"
    factname_curl_result: "prj_a_ex2_2_b_ex2"
    expected_rc: 28

#
# Prove that both pods in the second project can talk to both pods in the first project
# because the first project does not have the networkpolicies in place to prevent this.
#
- import_tasks: curl_from_pod.yml
  vars:
    testcase_desc: "Proving prj_b ex1 can curl proj_a ex1"
    pod_name: "{{ prj_b_pod_ex1.resources[0].metadata.name }}"
    project_namespace: "{{ prj_b_pod_ex1.resources[0].metadata.namespace }}"
    curl_url: "http://{{ prj_a_svc_ex1.resources[0].spec.clusterIP }}:{{ prj_a_svc_ex1.resources[0].spec.ports[0].port }}"
    factname_curl_result: "prj_b_http_2_a_http"
    expected_rc: 0

- import_tasks: curl_from_pod.yml
  vars:
    testcase_desc: "Proving prj_b ex1 can curl proj_a ex2"
    pod_name: "{{ prj_b_pod_ex1.resources[0].metadata.name }}"
    project_namespace: "{{ prj_b_pod_ex1.resources[0].metadata.namespace }}"
    curl_url: "http://{{ prj_a_svc_ex2.resources[0].spec.clusterIP }}:{{ prj_a_svc_ex2.resources[0].spec.ports[0].port }}"
    factname_curl_result: "prj_b_http_2_a_ex2"
    expected_rc: 0

- import_tasks: curl_from_pod.yml
  vars:
    testcase_desc: "Proving prj_b ex2 can curl proj_a ex1"
    pod_name: "{{ prj_b_pod_ex2.resources[0].metadata.name }}"
    project_namespace: "{{ prj_b_pod_ex2.resources[0].metadata.namespace }}"
    curl_url: "http://{{ prj_a_svc_ex1.resources[0].spec.clusterIP }}:{{ prj_a_svc_ex1.resources[0].spec.ports[0].port }}"
    factname_curl_result: "prj_b_ex2_2_a_ex1"
    expected_rc: 0

- import_tasks: curl_from_pod.yml
  vars:
    testcase_desc: "Proving prj_b ex2 can curl proj_a ex2"
    pod_name: "{{ prj_a_pod_ex2.resources[0].metadata.name }}"
    project_namespace: "{{ prj_a_pod_ex2.resources[0].metadata.namespace }}"
    curl_url: "http://{{ prj_a_svc_ex2.resources[0].spec.clusterIP }}:{{ prj_a_svc_ex2.resources[0].spec.ports[0].port }}"
    factname_curl_result: "prj_b_ex2_2_a_ex2"
    expected_rc: 0

#
# Prove that both pods in the first project can be reached from outside the cluster
#
- name: "Get Routes for {{ project_names[0] }}"
  k8s_info:
    kind: Route
    api_version: v1
    namespace: "{{ project_names[0] }}"
  register: prja_routes

- name: save prja routes
  copy:
    dest: "./prja_routes.yml"
    content: "{{ prja_routes | to_nice_yaml }}"

- name: "first project accessible from outside cluster"
  uri:
    url: "http://{{ item.spec.host }}"
    status_code: 200
    return_content: yes
  register: prja_curl
  loop: "{{ prja_routes.resources }}"
  loop_control:
    extended: yes
    label: "{{ item.spec.host }}"


#
# Prove that both pods in the second project can be reached from outside the cluster
#
- name: "Get Routes for {{ project_names[1] }}"
  k8s_info:
    kind: Route
    api_version: v1
    namespace: "{{ project_names[1] }}"
  register: prjb_routes

- name: "second project accessible from outside cluster"
  uri:
    url: "http://{{ item.spec.host }}"
    status_code: 200
    return_content: yes
  register: prja_curl
  loop: "{{ prjb_routes.resources }}"
  loop_control:
    extended: yes
    label: "{{ item.spec.host }}"
#
# Cleanup
#    This will be skipped when "--skip-tags always" is used
#
- name: "Cleanup files"
  file:
    state: absent
    path: "{{ item }}"
  loop:
    - app_prj_a_pod_ex1.yml
    - app_prj_a_pod_ex2.yml
    - app_prj_b_pod_ex1.yml
    - app_prj_b_pod_ex2.yml
    - demo_timestamp.yml
    - network_policies_verified.yml
    - prj_a_svc_ex1.yml
    - prj_a_svc_ex2.yml
    - prj_b_svc_ex1.yml
    - prj_b_svc_ex2.yml
    - project_names.yml
  loop_control:
    extended: yes
    label: "{{ item }}"

- name: "Delete the projects"
  command: 
    argv:
      - /usr/local/bin/oc
      - delete
      - project
      - "{{ item }}" 
  loop: "{{ project_names }}"
  loop_control:
    extended: yes
    label: "{{ item }}"
