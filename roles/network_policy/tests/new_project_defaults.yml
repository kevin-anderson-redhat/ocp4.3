- name: Create a timestamp without fact gathering
  set_fact:
     test_timestamp: "{{ lookup('pipe',\"date '+%s'\") }}"

- name: Create project_names
  set_fact:
     project_names:
       - "tnpa-{{ test_timestamp }}"
       - "tnpb-{{ test_timestamp }}"

- name: "Create projects"
  command:
    argv:
      - /usr/local/bin/oc
      - new-project
      - "{{ item }}" 
  loop: "{{ project_names }}"
  loop_control:
    extended: yes
    label: "{{ item }}"
  register: new_projects

- name: show new proj
  debug:
    var: new_projects
  tags: [ never, debug ]

- name: Get policies for each project
  k8s_info:
    api_version: networking.k8s.io/v1
    kind: NetworkPolicy
    namespace: "{{ item }}"
  loop: "{{ project_names }}"
  loop_control:
    extended: yes
    label: "{{ item }}"
  register: network_policies

- name: show network_policies
  debug:
    var: network_policies
  tags: [ never, debug ]

- name: Set policy count
  set_fact:
     network_policy_count_a: "{{ network_policies.results[0].resources | length }}"
     network_policy_count_b: "{{ network_policies.results[1].resources | length }}"

- debug:
    msg: "{{ network_policy_count_a }}   {{network_policy_count_b }}"
  tags: [ never, debug ]

- name: Three network policies should exist for each new project
  assert:
    that:
      - network_policy_count_a == "3"
      - network_policy_count_b == "3"
    fail_msg: "Did not find 3 network policies in the new projects"
    success_msg: "Found 3 network policies in the new projects"

#
# Remove network policies from first project
#
- name: Remove deny-by-default network policy from first project
  k8s:
    state: absent
    name: deny-by-default
    namespace: "{{ project_names[0] }}"
    kind: NetworkPolicy
    api_version: networking.k8s.io/v1

- name: Remove allow-from-same-namepsace network policy from first project
  k8s:
    state: absent
    name: allow-from-same-namespace
    namespace: "{{ project_names[0] }}"
    kind: NetworkPolicy
    api_version: networking.k8s.io/v1

- name: Remove allow-from-openshift-ingress network policy from first project
  k8s:
    state: absent
    name: allow-from-openshift-ingress
    namespace: "{{ project_names[0] }}"
    kind: NetworkPolicy
    api_version: networking.k8s.io/v1
#
# Spin Up pods in project a
#
- name: "Create httpd-example in first project"
  command:
    argv:
      - /usr/local/bin/oc
      - new-app
      - httpd-example
      - "-n"
      - "{{ project_names[0] }}"

- name: Search for running httpd-example in first project
  k8s_info:
    kind: Pod
    namespace: "{{ project_names[0] }}"
    label_selectors:
      - name=httpd-example
    field_selectors:
      - status.phase=Running
  register: a_httpd
  until: a_httpd.resources != [] 
  delay: 10
  retries: 15

- name: save first project httpd-example
  copy:
    content: "{{ a_httpd }}"
    dest: ./a_httpd.yml

- pause:
    seconds: 5

- name: "Create nodejs-ex in first project"
  command:
    argv:
      - /usr/local/bin/oc
      - new-app
      - https://github.com/sclorg/nodejs-ex.git
      - "-n"
      - "{{ project_names[0] }}"

- name: Search for running node-js in first project
  k8s_info:
    kind: Pod
    namespace: "{{ project_names[0] }}"
    label_selectors:
      - deploymentconfig=nodejs-ex
    field_selectors:
      - status.phase=Running
  register: a_nodejs
  until: a_nodejs.resources != []
  delay: 10
  retries: 15

- name: save first project node-js
  copy:
    content: "{{ a_nodejs }}"
    dest: ./a_nodejs.yml

- pause:
    seconds: 5

#
# Spin Up pods in project b
#
- name: "Create httpd-example in second project"
  command:
    argv:
      - /usr/local/bin/oc
      - new-app
      - httpd-example
      - "-n"
      - "{{ project_names[1] }}"

- name: Search for running httpd-example in second project
  k8s_info:
    kind: Pod
    namespace: "{{ project_names[1] }}"
    label_selectors:
      - name=httpd-example
    field_selectors:
      - status.phase=Running
  register: b_httpd
  until: b_httpd.resources != [] 
  delay: 10
  retries: 15

- name: save second project httpd-example
  copy:
    content: "{{ b_httpd }}"
    dest: ./b_httpd.yml

- pause:
    seconds: 5

- name: "Create nodejs-ex in second project"
  command:
    argv:
      - /usr/local/bin/oc
      - new-app
      - https://github.com/sclorg/nodejs-ex.git
      - "-n"
      - "{{ project_names[1] }}"

- name: Search for running node-js in second project
  k8s_info:
    kind: Pod
    namespace: "{{ project_names[1] }}"
    label_selectors:
      - deploymentconfig=nodejs-ex
    field_selectors:
      - status.phase=Running
  register: b_nodejs
  until: b_nodejs.resources != []
  delay: 10
  retries: 15

- name: save second project httpd-example
  copy:
    content: "{{ b_nodejs }}"
    dest: ./b_nodejs.yml

- pause:
    seconds: 5
#
# Prove that two pods in the first project can talk to each other
#    This shows that without NetworkPolicy objects, pods in the 
#    same project can communicate with each other
#

# Prove that two pods in the second project can talk to each other
#    This shows that with NetworkPolicy objects, pods in the 
#    same project can still communicate with each other
#

#
# Prove that a pod in the second project can reach a pod in the first project
#    This shows that the first project without NetworkPolicy objects allows communications
#    from other namespaces

#
# Prove that a pod in the first project can not reach a pod in the second project
#    This shows that the NetworkPolicy objects in the second project prevent
#    connections from other namespaces
#


#
# Prove that a pod in the second project can reach a pod in the first project
#


#
# Cleanup
#
- name: "Delete the projects"
  command: 
    argv:
      - /usr/local/bin/oc
      - delete
      - project
      - "{{ item }}" 
  loop: "{{ project_names }}"
  loop_control:
    extended: yes
    label: "{{ item }}"
