#
# The following tasks are derived from
#   https://docs.openshift.com/container-platform/4.3/logging/cluster-logging-deploying.html
#

#   https://docs.openshift.com/container-platform/4.3/logging/cluster-logging-deploying.html#cluster-logging-deploy-eo-cli_cluster-logging-deploying
#
# 1. Create a namespace for the Elasticsearch Operator
#
  # /usr/local/bin/oc create -f eo-namespace.yaml
  - name: Openshift operators redhat namespace
    k8s:
      name: openshift-operators-redhat
      state: present
      api_version: v1
      kind: Namespace
      definition:
        metadata:
          annotations:
            openshift.io/node-selector: ""
          labels:
            openshift.io/cluster-monitoring: "true"

#
# 2. Install the Elasticsearch Operator
#
  # a. Create an operator Group
  # /usr/local/bin/oc create -f eo-og.yaml
  - name: Openshift-Operators-RedHat  OperatorGroup
    k8s:
      state: present
      definition:
        apiVersion: operators.coreos.com/v1
        kind: OperatorGroup
        metadata:
          name: openshift-operators-redhat
          namespace: openshift-operators-redhat
        spec: {}



  # c. Create a Subscription object
  # /usr/local/bin/oc create -f eo-sub.yaml
  - name: ElasticSearch Operator subscription
    k8s:
      state: present
      definition:
        apiVersion: operators.coreos.com/v1alpha1
        kind: Subscription
        metadata:
          name: "elasticsearch-operator"
          namespace: "openshift-operators-redhat"
        spec:
          channel: "4.3"
          installPlanApproval: "Automatic"
          source: "redhat-operators"
          sourceNamespace: "openshift-marketplace"
          name: "elasticsearch-operator"

  # f. Create a Role-based Access Control to give Prometheus access to the
  #    openshift-operators-redhat namespace
  # /usr/local/bin/oc create -f eo-rbac.yaml
  - name: Prometheus role
    k8s:
      state: present
      definition:
        apiVersion: rbac.authorization.k8s.io/v1
        kind: Role
        metadata:
          name: prometheus-k8s
          namespace: openshift-operators-redhat
        rules:
        - apiGroups:
          - ""
          resources:
          - services
          - endpoints
          - pods
          verbs:
          - get
          - list
          - watch

  - name: Prometheus role binding
    k8s:
      state: present
      definition:
        apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: prometheus-k8s
          namespace: openshift-operators-redhat
        roleRef:
          apiGroup: rbac.authorization.k8s.io
          kind: Role
          name: prometheus-k8s
        subjects:
        - kind: ServiceAccount
          name: prometheus-k8s
          namespace: openshift-operators-redhat

#   https://docs.openshift.com/container-platform/4.3/logging/cluster-logging-deploying.html#cluster-logging-deploy-clo-cli_cluster-logging-deploying
#
# openshift-operators-redhat
#
# 1. Create the Namespace
  # /usr/local/bin/oc create -f clo-namespace.yaml
  - name: Namespace openshift-logging
    k8s:
      state: present
      api_version: logging.openshift.io/v1
      definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: openshift-logging
        annotations:
          openshift.io/node-selector: ""
        labels:
          openshift.io/cluster-monitoring: "true"


# 2. Install the Cluster Logging Operator
  # a. Create the Operator Group
  # /usr/local/bin/oc create -f clo-og.yaml
  - name: Cluster logging operator group
    k8s:
      state: present
      definition:
        apiVersion: operators.coreos.com/v1
        kind: OperatorGroup
        metadata:
          name: cluster-logging
          namespace: openshift-logging
        spec:
          targetNamespaces:
          - openshift-logging

  # c. Create a Subscription
  # /usr/local/bin/oc create -f clo-sub.yaml
  - name: Cluster logging subscription
    k8s:
      state: present
      definition:
        apiVersion: operators.coreos.com/v1alpha1
        kind: Subscription
        metadata:
          name: cluster-logging
          namespace: openshift-logging
        spec:
          channel: "4.3"
          name: cluster-logging
          source: redhat-operators
          sourceNamespace: openshift-marketplace

#
# Create the cluster logging instance
#    Include the infrastructure taints and tolerations
#
  - name: Logging infrastructure node selection and taint toleration
    k8s:
      state: present
      definition:
        apiVersion: logging.openshift.io/v1
        kind: "ClusterLogging"
        metadata:
          name: "instance"
          namespace: "openshift-logging"
        spec:
          managementState: "Managed"
          logStore:
            type: "elasticsearch"
            elasticsearch:
              nodeCount: 3
              nodeSelector:
                node-role.kubernetes.io/infra: ''
              redundancyPolicy: "SingleRedundancy"
              resources:
                limits:
                  cpu: "{{ cluster_logging_es_limit_cpu }}"
                  memory: "{{ cluster_logging_es_limit_mem }}"
                requests:
                  cpu: "{{ cluster_logging_es_request_cpu }}"
                  memory: "{{ cluster_logging_es_request_mem }}"
              storage:
                storageClassName: "{{ cluster_logging_es_storage_classname }}"
                size: "{{ cluster_logging_es_storage_size }}"
              type: "elasticsearch"
              tolerations:
                - effect: NoSchedule
                  key: infra
                  value: reserved
                - effect: NoExecute
                  key: infra
                  value: reserved
          visualization:
            type: "kibana"
            kibana:
              nodeSelector:
                node-role.kubernetes.io/infra: ''
              replicas: 1
              tolerations:
                - effect: NoSchedule
                  key: infra
                  value: reserved
                - effect: NoExecute
                  key: infra
                  value: reserved
          curation:
            type: "curator"
            curator:
              nodeSelector:
                node-role.kubernetes.io/infra: ''
              schedule: "30 3 * * *"
              tolerations:
                - effect: NoSchedule
                  key: infra
                  value: reserved
                - effect: NoExecute
                  key: infra
                  value: reserved
          collection:
            logs:
              type: "fluentd"
              fluentd:
                tolerations:
                  - effect: NoSchedule
                    key: infra
                    value: reserved
                  - effect: NoExecute
                    key: infra
                    value: reserved
